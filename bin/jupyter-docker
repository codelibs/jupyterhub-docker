#!/bin/bash

cd `dirname $0`
cd ..
BASE_DIR=`pwd`

SCRIPTNAME=jupyter-docker

if [ x"$JD_HOSTNAME" = x ] ; then
  JD_HOSTNAME=`uname -n`
fi

start_container() {
  $DOCKER_CMD start `$DOCKER_CMD ps -a | grep $JD_IMAGE_NAME | awk '{print $1}' | head -n1`
}

stop_container() {
  $DOCKER_CMD stop `$DOCKER_CMD ps | grep $JD_IMAGE_NAME | awk '{print $1}'`
}

status_container() {
  $DOCKER_CMD ps -a | grep $JD_IMAGE_NAME
}

remove_image() {
  $DOCKER_CMD rm `$DOCKER_CMD ps -a | grep $JD_IMAGE_NAME | awk '{print $1}'`
  $DOCKER_CMD rmi `$DOCKER_CMD images | grep $JD_IMAGE_NAME | awk '{print $3}'`
}

build_image() {
  if [ ! -d $BASE_DIR/docker/$JD_IMAGE_TAG ] ; then
    echo "$BASE_DIR/docker/$JD_IMAGE_TAG does not exist."
    exit 1
  fi
  $DOCKER_CMD build $DOCKER_OPTS -t $JD_IMAGE_NAME -f $BASE_DIR/docker/$JD_IMAGE_TAG/Dockerfile $BASE_DIR
}

run_container() {
  ENV_FILE=$BASE_DIR/env/$JD_HOSTNAME
  if [ ! -f $ENV_FILE ] ; then
    ENV_FILE=$BASE_DIR/env/localhost
  fi

  ARG_FILE=$BASE_DIR/arg/$JD_HOSTNAME
  if [ ! -f $ARG_FILE ] ; then
    ARG_FILE=$BASE_DIR/arg/localhost
  fi

  ARGS="--env-file=$ENV_FILE "`cat $ARG_FILE`
  if [ x"$RUN_CMD" == "x" ] ; then
    $DOCKER_CMD run -d -t $ARGS $JD_IMAGE_NAME
  else
    $DOCKER_CMD run -it $ARGS $JD_IMAGE_NAME $RUN_CMD
  fi
}

while [[ $# -gt 0 ]] ; do
  case $1 in
    -t|--tag)
      JD_IMAGE_TAG=$2
      shift
      shift
      ;;
    -c|--command)
      RUN_CMD=$2
      shift
      shift
      ;;
    -f|--force)
      case $SUB_COMMAND in
        build)
          DOCKER_OPTS="$DOCKER_OPTS --no-cache=true"
        ;;
      esac
      shift
      ;;
    start|stop|status|remove|build|run)
      SUB_COMMAND=$1
      shift
      ;;
  esac
done

if [ x"$JD_IMAGE_TAG" = "x" ] ; then
  echo "No docker image tag(-t)."
  exit 1
fi
JD_IMAGE_NAME=codelibs/jupyterhub:$JD_IMAGE_TAG

if [[ "$JD_IMAGE_TAG" =~ ^cuda ]] ; then
  DOCKER_CMD=`which nvidia-docker`
else
  DOCKER_CMD=`which docker`
fi
if [ x"$DOCKER_CMD" = "x" ] ; then
  echo "docker command is not found."
  exit 1
fi

case "$SUB_COMMAND" in
  start)
    start_container
    ;;
  stop)
    stop_container
    ;;
  status)
    status_container
    ;;
  remove)
    remove_image
    ;;
  build)
    build_image
    ;;
  run)
    run_container
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|remove|build|run}" >&2
    exit 3
    ;;
esac
